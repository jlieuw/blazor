@page "/JSInterop"
@*Inject JSRuntime to allow JavaScript Interop *@
@inject IJSRuntime JSRuntime
<h1>JavaScript Interop</h1>
<div>
    <button type="button"
            class="btn btn-primary"
            @onclick="HelloWorld">
        Hello World
    </button>
</div>

<br />
<div>
    <button type="button" 
            class="btn btn-primary" 
            @onclick="SayMyName">
        Say My Name
    </button>
    <br />
    <p>@strSayMyName</p>
</div>

@code {
    public async void HelloWorld()
    {
        // helloWorld is implemented in
        // wwwroot /exampleJsInterop.js
        await JSRuntime.InvokeAsync<string>(
            "exampleJsFunctions.helloWorld", null
        );
    }

    string strSayMyName = "";
    public async void SayMyName()
    {
        // showPrompt is implemented in wwwroot/example2JsInterop.js
        var NameFromJavaScript = 
            await JSRuntime.InvokeAsync<string>(
                "example2JsFunctions.showPrompt", 
                "What's your name?"
                );
        strSayMyName = $"Your name is: {NameFromJavaScript}";
        // Must call StateHasChanged() because Blazor 
        // will not know to refresh page because 
        // it was updated by JavaScript
        StateHasChanged();
    }
}